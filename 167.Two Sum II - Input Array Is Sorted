# Code statement 

Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that 
they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] 
where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

--------------------------------------------------------------------------------------------------------------------------------

# Code solution (in java)

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left=0,right=numbers.length-1;
        while(left<right){
            int element=numbers[left]+numbers[right];
            if(element==target){
                return new int[]{left+1,right+1};
            }
            else if(element>target){
                right--;
            }
            else{
                left++;
            }
        }
        return new int[]{};
    }
}

-----------------------------------------------------------------------------------------------------------------------------

# Complexities

1.)Time complexity :-O(1)
2.)Space complexity :- O(n)
