## PROBLEM STATEMENT 

Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:

Each letter in pattern maps to exactly one unique word in s.
Each unique word in s maps to exactly one letter in pattern.
No two letters map to the same word, and no two words map to the same letter.

===============================================================================================================================================================================

## SOLUTION ( IN JAVA )

class Solution {
    public boolean wordPattern(String pattern, String s) {
        String[] words=s.split(" ");
        if(pattern.length()!=words.length){
            return false;
        }
        Map<Character,String> charToWord=new HashMap<>();
        Map<String,Character> wordToChar=new HashMap<>();

        for(int i=0;i<pattern.length();i++){
            char ch=pattern.charAt(i);
            String word=words[i];
            
            if(charToWord.containsKey(ch)){ 
                if(!charToWord.get(ch).equals(word)){
                   return false;
                }
            }
            else{
                if(wordToChar.containsKey(word)){
                    if(!wordToChar.get(word).equals(ch)){
                        return false;
                    }
                }

            }
            charToWord.put(ch,word);
            wordToChar.put(word,ch);
        }
        return true;
    }
}

===============================================================================================================================================================================

## CODE COMPLEXITIES :- 

1.) TIME COMPLEXITY :- O(n+m) , n=traversing array , m=splitting array 
2.) SPACE COMPLEXITY :- O(k) , k= size of hashMap 

===============================================================================================================================================================================
