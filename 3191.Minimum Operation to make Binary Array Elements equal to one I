# Code statement 

You are given a binary array nums.

You can do the following operation on the array any number of times (possibly zero):

Choose any 3 consecutive elements from the array and flip all of them.
Flipping an element means changing its value from 0 to 1, and from 1 to 0.

Return the minimum number of operations required to make all elements in nums equal to 1. If it is impossible, return -1.

=================================================================================================================================================================================

# Code solution 

class Solution {
    public int minOperations(int[] nums) {
        int flips=0;
        int n=nums.length;
        for(int i=0;i<n-2;i++){
            if(nums[i]==0){
                flips++;
                nums[i]=1;
                nums[i+1]=1-nums[i+1];
                nums[i+2]=1-nums[i+2];
                
            }
        }
        return nums[n-1]==1 && nums[n-2]==1 ? flips : -1;
    }
}

===============================================================================================================================================================================

# Code complexity :- 

1.) Time complexity :- O(n)
2.) Space complexity :- O(1)

===============================================================================================================================================================================
