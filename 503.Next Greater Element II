## PROBLEM STATEMENT 

Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. 
If it doesn't exist, return -1 for this number.

==============================================================================================================================================================================

## CODE ( IN JAVA )

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n=nums.length;
        int[] result=new int[n];
        Arrays.fill(result,-1);
        Stack<Integer> stack=new Stack<>();

        for(int i=0;i<2*n;i++){
            int num=nums[i%n];
            while(!stack.isEmpty() && nums[stack.peek()]<num){
                result[stack.pop()]=num;
            }
            if(i<n){
                stack.push(i);
            }
        }
        return result;
    }
}

==============================================================================================================================================================================

## CODE COMPLEXITY :- 

1.) TIME COMPLEXITY :- O(n)
2.) SPACE COMPLEXITY :- O(n)

==============================================================================================================================================================================
