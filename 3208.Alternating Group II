# Code statement 

There is a circle of red and blue tiles. You are given an array of integers colors and an integer k. The color of tile i is represented by colors[i]:

colors[i] == 0 means that tile i is red.
colors[i] == 1 means that tile i is blue.
An alternating group is every k contiguous tiles in the circle with alternating colors 
(each tile in the group except the first and last one has a different color from its left and right tiles).

Return the number of alternating groups.

Note that since colors represents a circle, the first and the last tiles are considered to be next to each other.

=================================================================================================================================================================================

# Code solution (in java)
 class Solution {
    public int numberOfAlternatingGroups(int[] colors, int k) {
        int n = colors.length;
        int count = 0;
        int l = 0;
        int limit = n + k - 1;

        while (l < n) {
            // Find largest valid window
            int r = l + 1;
            while (r < limit && colors[(r - 1) % n] != colors[r % n]) {
                r++;
            }

            // Count Valid Windows
            if (r - l >= k) {
                count += (r - l) - k + 1;
            }
            l = r;
        }
        return count;
    }
}

==============================================================================================================================================================================

# Code complexity :- 
1.)Time complexity :- O(n)
2.)Space complexiy:-O(n)

==============================================================================================================================================================================
