## PROBLEM STATEMENT 

There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.

You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].

Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) 
in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.

Return the time taken for the person initially at position k (0-indexed) to finish buying tickets.

=================================================================================================================================================================================

## CODE ( IN JAVA )

class Solution {
    public int timeRequiredToBuy(int[] tickets, int k) {
        Queue<int[]> queue =new LinkedList<>();
        for(int i=0;i<tickets.length;i++){
            queue.add(new int[]{i,tickets[i]});
        }  
        int time=0;

        while(!queue.isEmpty()){
            int[] person=queue.poll(); 
            person[1]--;
            time++;

            if(person[0]==k && person[1]==0){
                return time;
            }

            if(person[1]>0){
                queue.add(person);
            }
        }

        return time;
    }
}

=================================================================================================================================================================================

## CODE COMPLEXITY :-

1.) TIME COMPLEXITY :-O(n)
2.) SPACE COMPLEXITY :-O(1)

=================================================================================================================================================================================
