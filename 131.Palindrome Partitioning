## PROBLEM STATEMENT 

Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

===============================================================================================================================================================================

## SOLUTION ( IN JAVA ) :-

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans=new ArrayList<>();
        backtrack(0,s,new ArrayList<>(),ans);
        return ans;
    }
    public void backtrack(int start,String s,List<String> path,List<List<String>> ans){
       if(start==s.length()){
        ans.add(new ArrayList<>(path));
        return ;
       }
       for(int i=start;i<s.length();i++){
        if(isPalindrome(s,start,i)){
            path.add(s.substring(start,i+1)); // push
            backtrack(i+1,s,path,ans); 
            path.remove(path.size()-1); // pop
        }
       }
    }
    private boolean isPalindrome(String s,int l,int r){
        while(l<r){
            if(s.charAt(l)!=s.charAt(r)) return false;
            l++;
            r--;
        }
        return true ;
    }
}

===============================================================================================================================================================================

## CODE COMPLEXITY :- 

1.) TIME COMPLEXITY :- O(n*2^n)
2.) SPACE COMPLEXITY :- O(n*2^n)

===============================================================================================================================================================================
