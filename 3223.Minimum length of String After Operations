# Code question 

You are given a string s.

You can perform the following process on s any number of times:

Choose an index i in the string such that there is at least one character to the left of index i that is equal to s[i],
and at least one character to the right that is also equal to s[i].

Delete the closest character to the left of index i that is equal to s[i].

Delete the closest character to the right of index i that is equal to s[i].

Return the minimum length of the final string s that you can achieve.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Solution(in java)

class Solution {
    public int minimumLength(String s) {
        int[] frequency=new int[26];
        for(char ch:s.toCharArray()){
            frequency[ch-'a']++; 
        }
        int deleteCount=0;
        for(int freq:frequency)
        {
            if(freq>0){
                if(freq%2!=0){
                    deleteCount+=(freq-1);
                }
                else{
                    deleteCount+=(freq-2);
                }
            }
        } 
        int minlength=s.length()-deleteCount;
        return minlength;   
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Complexities

Time Complexity :- O(n) + O(26) = O(n)+O(1) = O(n)
Space Complexity :- O(1)
