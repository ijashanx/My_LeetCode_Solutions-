# Code question 

# Solution(in java)
class Solution {
    public boolean checkEqual(int[] a, int[] b) {
        for (int i = 0; i < 26; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }

    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length()) return false;

        // Character count arrays
        int[] count1 = new int[26];
        int[] count2 = new int[26];

        for (int i = 0; i < s1.length(); i++) {
            count1[s1.charAt(i) - 'a']++;
        }

        int windowSize = s1.length();

        // Process the first window in s2
        for (int i = 0; i < windowSize; i++) {
            count2[s2.charAt(i) - 'a']++;
        }

        if (checkEqual(count1, count2)) return true;

        // Sliding window technique
        for (int i = windowSize; i < s2.length(); i++) {
            count2[s2.charAt(i) - 'a']++;  // Add new character
            count2[s2.charAt(i - windowSize) - 'a']--; // Remove old character

            if (checkEqual(count1, count2)) return true;
        }

        return false;
    }
}

# Complexities
1.)Time complexity:-O(n)
2.)Space complexity :-O(1)
