# Code Question 

You are given a 0-indexed string array words.
Let's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:
isPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix
of str2, and false otherwise.
For example, isPrefixAndSuffix("aba", "ababa") is true because "aba" is a prefix of "ababa" and also a suffix, but isPrefixAndSuffix("abc", "abcd") is false.

Return an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Approches 

In this question I have used Brute force.

Steps:-

1.)Loop through all pairs of words.
2.)Check if words[j] starts with words[i] using .startswith().
3.)Check if words[j] ends with words[i] using .endswith().

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Time Complexity:-

𝑂(𝑛2⋅𝑚)

where n is the number of words and m is the maximum length of a word.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Code (in java)

public class PrefixSuffixCounter {
    public static boolean isPrefixAndSuffix(String str1, String str2) {
        return str2.startsWith(str1) && str2.endsWith(str1);
    }
    public static int countPrefixSuffixPairs(String[] words) {
        int count = 0;
        int n = words.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isPrefixAndSuffix(words[i], words[j])) {
                    count++;
                }
            }
        }
        return count;
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


 
