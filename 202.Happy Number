## PROBLEM STATEMENT 

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

=================================================================================================================================================================================

## CODE ( IN JAVA )

class Solution {
    private static int sumOfsquares(int n){
            int sum=0;
            while(n>0){
                int digit=n%10;
                sum+=digit*digit;
                n/=10;
            }
            return sum;
        }
    public boolean isHappy(int n) {
        Set<Integer> seen=new HashSet<>();
        while(n!=1){
            if(seen.contains(n)){
               return false;
            }
            seen.add(n);
            n=sumOfsquares(n);
        }   
        return true;  
    }
}

=================================================================================================================================================================================

## CODE COMPLEXITIES :- 

1.) TIME COMPLEXITY :- O(1)
2.) SPACE COMPLEXITY :- O(1)

=================================================================================================================================================================================
